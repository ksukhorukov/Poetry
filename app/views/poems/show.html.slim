/  - model_class = Poem
  .page-header
    h1=t '.title', :default => model_class.model_name.human.titleize

  p
    strong= model_class.human_attribute_name(:title) + ':'
    =< @poem.title
  p
    strong= model_class.human_attribute_name(:content) + ':'
    br
    = raw @poem.content.gsub(/\r\n/, '<br/>')
  p
    strong= model_class.human_attribute_name(:metaphor) + ':'
    =< @poem.metaphor
  p
    strong= model_class.human_attribute_name(:user_id) + ':'
    =< @poem.user.email


p
  h1= @poem.title
  ' by
  i
    = link_to profile_composers_path(profile_id: @poem.user.profile.id) do
      = @poem.user.profile.name
p= l @poem.created_at
table.table.table-striped
  tbody
    tr
      td= @poem.metaphor
    tr
      td= raw @poem.content.gsub(/\r\n/, '<br/>')
    tr
      td
        - @poem.tags.each do |tag|
          =< link_to composes_path(tag_name: tag.name) do
            = tag.name


hr
= link_to t('.back', :default => t("helpers.links.back")), poems_path, :class => 'btn btn-default'
'
- if current_user.present? && current_user == @poem.user
  = link_to t('.edit', :default => t("helpers.links.edit")), edit_poem_path(@poem), :class => 'btn btn-default'
  '
  = link_to t('.destroy', :default => t("helpers.links.destroy")), poem_path(@poem), :method => "delete", :data => {:confirm => t('.confirm', :default => t("helpers.links.confirm", :default => 'Are you sure?'))}, :class => 'btn btn-danger'


